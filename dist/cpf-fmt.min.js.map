{"version":3,"sources":["../node_modules/html-escaper/esm/index.js","core/mergeOptions.ts","../node_modules/@lacussoft/num-only/src/index.js","core/cpfFmt.ts","dist.js"],"names":["replace","ca","es","esca","unes","escape","call","pe","unescape","un","cape","m","window","cpfFmt","require","default"],"mappings":"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","file":"cpf-fmt.min.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvar replace = ''.replace;\n\nvar ca = /[&<>'\"]/g;\nvar es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;\n\nvar esca = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;'\n};\nvar unes = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"'\n};\n\nexport function escape(es) {\n  return replace.call(es, ca, pe);\n};\n\nexport function unescape(un) {\n  return replace.call(un, es, cape);\n};\n\nfunction pe(m) {\n  return esca[m];\n}\n\nfunction cape(m) {\n  return unes[m];\n}\n","/* eslint-disable max-len */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable indent */\r\nimport { CpfFormatingOptions } from './CpfFormatingOptions'\r\n\r\n/**\r\n * Merge custom options to default ones\r\n *\r\n * @param {CpfFormatingOptions} options\r\n * @return {CpfFormatingOptions}\r\n */\r\nexport default function mergeOptions(options: CpfFormatingOptions) {\r\n\r\n  let {\r\n    delimiters: { dot = '.', dash = '-' } = {},\r\n    hiddenRange: { start = 3, end = 10, } = {},\r\n    hiddenKey = '*',\r\n    hidden = false,\r\n    escape = false,\r\n    onFail = (value: string) => {\r\n      throw new EvalError(`'${value}' cannot be resolved to a CPF numeric sequence (11 digits)`)\r\n    },\r\n  } = options\r\n\r\n  if (hidden) {\r\n\r\n    if (Number(start) === NaN || start < 0 || start > 10) {\r\n      throw new TypeError('Option \\'hiddenRange.start\\' must be a callbacknumber between 0 and 10.')\r\n    }\r\n\r\n    if (Number(end) === NaN || end < 0 || end > 10) {\r\n      throw new TypeError('Option \\'hiddenRange.end\\' must be a callbacknumber between 0 and 10.')\r\n    }\r\n\r\n    if (start > end) {\r\n      start = start ^end\r\n      end = start ^end\r\n      start = start ^end\r\n    }\r\n  }\r\n\r\n  if (typeof(onFail) !== 'function') {\r\n    throw new TypeError('The option \\'onFail\\' must be a callback function.')\r\n  }\r\n\r\n  return {\r\n    delimiters: { dot, dash },\r\n    hiddenRange: { start, end },\r\n    hiddenKey,\r\n    hidden,\r\n    escape,\r\n    onFail,\r\n  }\r\n}\r\n","/**\r\n * Removes any non-numeric character from a string chaing\r\n *\r\n * @param {string} target\r\n * @returns {string} - Target string you want to clear from NaN characters\r\n */\r\nmodule.exports = function(target) {\r\n\r\n  return String(target).replace(/\\D/g, '')\r\n}\r\n","/* eslint-disable indent */\r\n// eslint-disable-next-line no-unused-vars\r\nimport { CpfFormatingOptions } from './CpfFormatingOptions'\r\nimport html from 'html-escaper'\r\nimport mergeOptions from './mergeOptions'\r\nimport numOnly from '@lacussoft/num-only'\r\n\r\n/**\r\n * Validate a given CPF (Brazilian ID document) char sequence\r\n *\r\n * @param {string} cpfString\r\n * @param {object} options\r\n * @return {string}\r\n */\r\nexport default function(cpfString: string, options: CpfFormatingOptions = {}) {\r\n\r\n  const cpfNumbers: string = numOnly(cpfString)\r\n  const finalOptions = mergeOptions(options)\r\n\r\n  if (cpfNumbers.length !== 11) {\r\n    return finalOptions.onFail(cpfString)\r\n  }\r\n\r\n  const cpfArray: string[] = [...cpfNumbers]\r\n\r\n  if (finalOptions.hidden) {\r\n    // eslint-disable-next-line max-len\r\n    for (let i = finalOptions.hiddenRange.start; i <= finalOptions.hiddenRange.end; i++) {\r\n      cpfArray[i] = finalOptions.hiddenKey\r\n    }\r\n  }\r\n\r\n  cpfArray.splice(9, 0, finalOptions.delimiters.dash)\r\n  cpfArray.splice(6, 0, finalOptions.delimiters.dot)\r\n  cpfArray.splice(3, 0, finalOptions.delimiters.dot)\r\n  const cpfFormat = cpfArray.join('')\r\n\r\n  if (finalOptions.escape) {\r\n    return html.escape(cpfFormat)\r\n  }\r\n\r\n  return cpfFormat\r\n}\r\n","window.cpfFmt = require('./core/cpfFmt.ts').default\n"]}